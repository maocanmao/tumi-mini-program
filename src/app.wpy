<style lang="less">
</style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';
export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/agreement',
      'pages/welcome',
      'pages/letusgo',
      'pages/message',
      'pages/video',
      'pages/answer-index',
      'pages/answer-question',
      'pages/answer-question-complete',
      'pages/online-activity',
      'pages/offline-activity',
      'pages/message-detail',
      'pages/user-wroks',
      'pages/works-detail',
      'pages/draw',
      'pages/get-user-info',
      'pages/draw-result'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#041516',
      navigationBarTitleText: '',
      navigationBarTextStyle: 'white'
    },
    baseUrl: 'http://tumi.vipgz1.idcfengye.com/tumi/',
    tabBar: {
      color: '#979797',
      selectedColor: '#5f9920',
      backgroundColor: '#041516',
      borderStyle: 'black',
      list: [
        {
          pagePath: 'pages/index',
          text: '',
          selectedIconPath: 'pages/images/draw.png',
          iconPath: 'pages/images/draw-unselect.png'
        },
        {
          pagePath: 'pages/message',
          text: '',
          selectedIconPath: 'pages/images/message.png',
          iconPath: 'pages/images/message.png'
        },
        {
          pagePath: 'pages/video',
          text: '',
          selectedIconPath: 'pages/images/video.png',
          iconPath: 'pages/images/video.png'
        }
      ]
    }
  };
  globalData = {
    userInfo: null,
    ossImageUrl: 'https://tumi-miniprogram.oss-cn-beijing.aliyuncs.com/images/',
    userAnswer: [],
    currentBackground: null,
    drawItems: [],
    userImagesCount: 0
  };
  onLaunch() {
    console.log('on launch');
  }
  constructor() {
    super();
    this.use('requestfix');
    this.use('promisify');
    //拦截request请求
    this.intercept('request', {
      // 请求成功后的回调函数
      success(p) {
        // 可以在这里对收到的响应数据对象进行加工处理
        console.log('request success: ', p);
        if (p.statusCode == 401) {
          console.log('401 error, remove access token in storage');
          try {
            wx.removeStorageSync('accessToken');
            wx.showModal({
              content: '出错啦，小程序将会重新刷新',
              showCancel: false,
              success: function(res) {
                if (res.confirm) {
                  setTimeout(() => {
                    wx.reLaunch({
                      url: 'index'
                    });
                  }, 500);
                }
              }
            });
          } catch (e) {}
        }

        if (p.statusCode != 200) {
          // wx.showModal({
          //   content: '内部错误，请稍后再试',
          //   showCancel: false
          // });
        }
        return p;
      },
      //请求失败后的回调函数
      fail(p) {
        console.log('request fail: ', p);
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p;
      }
    });
  }
  sleep(s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved');
      }, s * 1000);
    });
  }
  getUserInfo() {
    return new Promise((resolve, reject) => {
      if (this.globalData.userInfo) {
        console.log('get from cache');
        resolve(this.globalData.userInfo);
      } else {
        wepy.hideLoading();
        wx.showModal({
          content: '请允许小程序访问个人资料',
          showCancel: false,
          success: function(res) {
            if (res.confirm) {
              wx.reLaunch({
                url: 'get-user-info'
              });
            }
          }
        });
      }
    });
  }
  getToken() {
    return new Promise((resolve, reject) => {
      //check login status
      wepy
        .checkSession()
        .then(res => {
          //get token from storage
          console.log('check storage...');
          wepy
            .getStorage({
              key: 'accessToken'
            })
            .then(res => {
              console.log('get token from storage success:' + res.data);
              if (res.data != undefined && res.data != null) {
                resolve(res.data);
              } else {
                this.doLogin().then(token => {
                  resolve(token);
                });
              }
            })
            .catch(error => {
              console.log('can not get token from storage ');
              this.doLogin().then(token => {
                resolve(token);
              });
            });
        }) //do login
        .catch(error => {
          console.log('invaild token');
          this.doLogin().then(token => {
            resolve(token);
          });
        });
    });
  }
  doLogin() {
    return new Promise((resolve, reject) => {
      //wechat login
      console.log('Do Wechat Login.');
      wepy.login().then(res => {
        console.log('CODE: ' + res.code);
        //login with backend
        console.log('login from backend...');
        this.getUserInfo()
          .then(userInfo => {
            wepy
              .request({
                url: this.config.baseUrl + 'login',
                method: 'POST',
                header: {
                  'App-ID': 'book'
                },
                data: {
                  nickname: userInfo.nickName,
                  img_url: userInfo.avatarUrl,
                  code: res.code
                }
              })
              .then(res => {
                console.log('login from backend: ' + JSON.stringify(res));
                this.globalData.accessToken = res.data.data.token;
                wepy
                  .setStorage({
                    key: 'accessToken',
                    data: this.globalData.accessToken
                  })
                  .then(success => {
                    resolve(this.globalData.accessToken);
                    console.log(
                      'sava token to storage success.' +
                        this.globalData.accessToken
                    );
                  });
              })
              .catch(error => {
                console.log('Backend can not be connected.' + error);
                wx.showToast({
                  title: '登录失败，请检查网络',
                  icon: 'none',
                  duration: 2000
                });
              });
          })
          .catch(error => {
            console.log('Auth error.' + error);
            wepy.hideLoading();
          });
      });
    });
  }
}
</script>
