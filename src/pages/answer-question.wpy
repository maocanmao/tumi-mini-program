<style lang="less">
page {
  background: #041516;
}
.container {
  background: #041516;
  width: 750rpx;
  height: 100%;
}
.border {
  border-color: #d7be71;
  border-width: 2rpx;
  border-style: solid;
}
.question-container {
  display: inherit;
  width: 100%;
  margin-top: 50rpx;
  height: 100%;
  margin-bottom: 40%;
}
.question-wrapper {
  display: flex;
  width: 600rpx;
  height: 250rpx;
  margin-left: 25rpx;
  margin-right: 25rpx;
  margin: 0 auto;
}
.question-number-wrapper {
  width: 100rpx;
}
.question-text-wrapper {
  width: 500rpx;
  padding: 20rpx;
}
.question-number {
  font-weight: normal;
  font-style: normal;
  font-stretch: normal;
  line-height: normal;
  letter-spacing: normal;
  text-align: center;
  color: #d7be71;
  font-size: 60rpx;
}
.question-text {
  font-family: PingFangSC;
  font-size: 16px;
  font-weight: 500;
  font-style: normal;
  font-stretch: normal;
  line-height: normal;
  letter-spacing: normal;
  color: #d7be71;
}
.answer-wrapper {
  height: 100rpx;
  margin-top: 30rpx;
}
.answer-indicator.selected {
  width: 30rpx;
  height: 30rpx;
  background-color: #d7be71;
  border-radius: 50%;
}
.answer-indicator {
  width: 30rpx;
  height: 30rpx;
  background-color: #041516;
  border-radius: 50%;
}
.confirm-btn-container {
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  bottom: 0%;
  width: 100%;
  height: 16.5%;
  background-color: #041516;
}
.confirm-btn {
  width: 100rpx;
  height: 100rpx;
  margin-top: 40rpx;
  margin-bottom: 40rpx;
}
.mask {
  position: fixed;
  bottom: 16.5%;
  width: 750rpx;
  height: 10rpx;
  background-color: #d7be71;
}
.mask-top {
  position: fixed;
  bottom: 620rpx;
  width: 750rpx;
  height: 10rpx;
  background-color: #d7be71;
}
.panel-btn {
  width: 90rpx;
  height: 56rpx;
  position: fixed;
  bottom: 16.3%;
  right: 10%;
}
.panel-btn.down {
  width: 90rpx;
  height: 56rpx;
  position: fixed;
  bottom: 574rpx;
  right: 10%;
}
.popup__content {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 620rpx;
  background: #041516;
}
.popup-image-content {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
  height: 360rpx;
  margin-top: 60rpx;
  background: #041516;
  flex-wrap: wrap;
}
.answer-image-wrapper {
  width: 25%;
  height: 174rpx;
  background: #041516;
}
.answer-image {
  width: 96%;
  height: 100%;
  border: solid 1rpx #d7be71;
}
</style>

<template>
  <view class="container">
    <scroll-view class='question-container' scroll-y='true'>
      <view class='question-wrapper border'>
        <wxc-cc class='question-number-wrapper border'>
          <text class='question-number'>{{currentQuestionIndex+1}}</text>
        </wxc-cc>
        <view class='question-text-wrapper border'>
          <text class='question-text'>{{questionsList[currentQuestionIndex].question}}</text>
        </view>
      </view>
      <view class='question-wrapper answer-wrapper' wx:for="{{answerList}}" @tap="answerChoosen({{index}})">
        <wxc-cc class='question-number-wrapper border'>
          <view class="answer-indicator {{item.selected?'selected':''}}"></view>
        </wxc-cc>
        <view class='question-text-wrapper border'>
          <text class='question-text'>{{item.name}}</text>
        </view>
      </view>
    </scroll-view>
    <view class="mask"></view>
    <image class="panel-btn" src="images/triangle.png" @tap="showPopUp()" />
    <view class="confirm-btn-container">
      <image class="confirm-btn" src="{{answerSelected?'images/check.png':'images/unCheck.png'}}" @tap="confirmAnswer()" />
    </view>
    <wxc-popup class="J_Popup" animation-mode="none" align="bottom" locked="true">
      <view class="popup__content">
        <view class="mask-top"></view>
        <image class="panel-btn down" src="images/triangle_down.png" @tap="hidePopUp()" />
        <view class="popup-image-content">
          <view class="answer-image-wrapper" wx:for="{{userAnswer}}">
            <image mode="aspectFit" src="{{item.imageSrc}}" class="answer-image" lazy-load="{{true}}" />
          </view>
        </view>
        <view class="confirm-btn-container">
          <image class="confirm-btn" src="{{answerSelected?'images/check.png':'images/unCheck.png'}}" />
        </view>
      </view>
    </wxc-popup>
  </view>
</template>

<script>
import wepy from 'wepy';
export default class AnswerQuestion extends wepy.page {
  config = {
    navigationBarTitleText: '',
    navigationBarBackgroundColor: '#041516',
    usingComponents: {
      'wxc-cc': '../../packages/@minui/wxc-cc/dist/index',
      'wxc-popup': '../../packages/@minui/wxc-popup/dist/index'
    }
  };
  data = {
    questionsList: [],
    answerList: [],
    userAnswer: [],
    currentQuestionIndex: null,
    canMutipleChoose: false,
    currentAnswerSelectedIndex: null,
    answerSelected: false
  };
  methods = {
    answerChoosen(index) {
      if (!this.canMutipleChoose) {
        for (let i = 0; i < this.answerList.length; i++) {
          this.answerList[i].selected = false;
        }
      }
      this.answerList[index].selected = true;
      this.answerSelected = true;
      this.currentAnswerSelectedIndex = index;
    },
    showPopUp() {
      let popupComponent = this.$wxpage.selectComponent('.J_Popup');
      popupComponent && popupComponent.show();
    },
    hidePopUp() {
      let popupComponent = this.$wxpage.selectComponent('.J_Popup');
      popupComponent && popupComponent.hide();
    },
    confirmAnswer() {
      if (this.answerSelected) {
        //TODO
        if (this.currentQuestionIndex == 7) {
          this.downAnswerImage()
            .then(success => {
              wepy.hideNavigationBarLoading();
              //set global data
              this.$parent.globalData.userAnswer = this.userAnswer;
              //answer completed
              wepy.redirectTo({
                url: 'answer-question-complete'
              });
            })
            .catch(error => {
              console.log('download image error: ', error);
              wepy.redirectTo({
                url: 'answer-question-complete'
              });
            });
        } else if (this.currentQuestionIndex < 7) {
          wepy.showNavigationBarLoading();
          this.downAnswerImage()
            .then(success => {
              wepy.hideNavigationBarLoading();
              this.toNextQuestion();
              this.$apply();
            })
            .catch(error => {
              console.log('download image error: ', error);
              wepy.hideNavigationBarLoading();
              this.toNextQuestion();
              this.$apply();
            });
        }
      }
    }
  };
  onLoad() {
    console.log('AnswerQuestion onLoad');
    this.currentQuestionIndex = 0;
    this.initUserAnswer();
    this.getQuestions();
  }

  downAnswerImage() {
    return new Promise((resolve, reject) => {
      // wepy.showNavigationBarLoading();
      let that = this;
      wx.downloadFile({
        url: this.answerList[that.currentAnswerSelectedIndex].imageSrc, //仅为示例，并非真实的资源
        success: function(res) {
          // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
          if (res.statusCode === 200) {
            console.log('download success.');
            that.userAnswer[that.currentQuestionIndex].imageSrc =
              res.tempFilePath;
            that.userAnswer[that.currentQuestionIndex].question =
              that.questionsList[that.currentQuestionIndex].question;
            that.userAnswer[that.currentQuestionIndex].answer =
              that.answerList[that.currentAnswerSelectedIndex].name;
            that.userAnswer[that.currentQuestionIndex].index =
              that.answerList[that.currentAnswerSelectedIndex].index;
            console.log('userAnswer: ', that.userAnswer);
            resolve('success');
          }
        },
        fail: function(error) {
          reject(error);
        }
      });
    });
  }

  getQuestions() {
    wepy.showNavigationBarLoading();
    this.$parent.getToken().then(token => {
      wepy
        .request(this.$parent.config.baseUrl + 'user/questions?token=' + token)
        .then(res => {
          wepy.hideNavigationBarLoading();
          console.log('get questions: ', res);
          this.questionsList = res.data.data;
          this.answerList = this.questionsList[0].answers;
          this.setAnswerImage();
          this.$apply();
        })
        .catch(error => {
          wx.stopPullDownRefresh();
          wepy.hideNavigationBarLoading();
          console.log('get questions error: ', error);
        });
    });
  }
  toNextQuestion() {
    this.answerSelected = false;
    this.currentQuestionIndex++;
    console.log('this.currentQuestionIndex: ', this.currentQuestionIndex);
    this.answerList = [];
    this.answerList = this.questionsList[this.currentQuestionIndex].answers;
    this.setAnswerImage();
    console.log('this.answerList: ', this.answerList);
  }
  //设置云盘图片地址 eg:1-1.png
  setAnswerImage() {
    for (let i = 0; i < this.answerList.length; i++) {
      this.answerList[i].imageSrc =
        this.$parent.globalData.ossImageUrl +
        'answerImageSmall/' +
        this.answerList[i].index +
        '.png';
    }
  }
  initUserAnswer() {
    for (let i = 0; i < 8; i++) {
      this.userAnswer.push({
        imageSrc: '',
        question: '',
        answer: '',
        index: ''
      });
    }
  }
}
</script>
