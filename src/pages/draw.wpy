<style lang="less">
page {
  background: #041516;
}
.screen {
  display: flex;
  flex-direction: column;
  background: #041516;
}
.canvas {
  width: 750rpx;
  height: 800px;
  border: 1px;
}
.view {
  display: flex;
  flex-direction: column;
}
.touchWrap {
  transform-origin: center;
  position: absolute;
  z-index: 100;
}
.imgWrap {
  box-sizing: border-box;
  width: 100%;
  transform-origin: center;
  float: left;
  border: 5rpx transparent dashed;
}
.imgWrap image {
  float: left;
}
.x {
  position: absolute;
  top: -25rpx;
  left: -25rpx;
  z-index: 500;
  display: none;
  width: 50rpx;
  height: 50rpx;
  overflow: hidden;
  font-weight: bold;
  color: #d1e3f1;
}
.o {
  position: absolute;
  bottom: -25rpx;
  right: -25rpx;
  width: 50rpx;
  height: 50rpx;
  text-align: center;
  display: none;
  overflow: hidden;
  font-weight: bold;
  color: #d1e3f1;
}
.touchActive {
  // border: 4rpx #fff dashed;
  z-index: 400;
}
.touchActive .x {
  display: block;
}
.touchActive .o {
  display: block;
}
.container {
  width: 750rpx;
  height: 1000rpx;
  background: #041516;
  margin-top: 11%;
}
.canvasWrap {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.6);
  z-index: 999;
  padding-top: 10px;
}
.maskCanvas {
  margin: auto;
}
.btn {
  margin-bottom: 30rpx;
}
.mask-demo_content {
  width: 350rpx;
  margin: 400rpx 0 0 180rpx;
  padding: 20rpx;
  background: #fff;
  color: #000;
}
.confirm-btn-container {
  display: flex;
  align-items: center;
  justify-content: space-around;
  position: fixed;
  bottom: 0%;
  width: 100%;
  height: 11%;
  background-color: #041516;
}
.mask {
  position: fixed;
  width: 750rpx;
  height: 10rpx;
  background-color: #d7be71;
}
.mask.bottom {
  bottom: 1%;
}
.mask.bottom.top {
  bottom: 10%;
  height: 7rpx;
}
.mask-top {
  top: 0%;
}
.mask-top.bottom {
  top: 7%;
  height: 7rpx;
}
.panel-btn {
  width: 90rpx;
  height: 56rpx;
  position: fixed;
  margin: 0 auto;
}
.panel-btn.down {
  bottom: 1%;
}
.panel-btn.top {
  top: 0%;
  right: 43%;
}
.bottom-popup-image-content {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  flex-wrap: wrap;
  width: 100%; // height: 400rpx;
  background: #041516;
}
.bottom-popup-image-first-line-content {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  width: 100%;
  height: 116rpx;
  padding-top: 130rpx;
  background: #041516;
}
.bottom-popup-mask-top {
  position: fixed;
  bottom: 800rpx;
  width: 100%;
  height: 10rpx;
  background-color: #d7be71;
}
.panel-btn-popup.down {
  width: 90rpx;
  height: 56rpx;
  position: fixed;
  bottom: 756rpx;
  right: 43%;
}
.small-image {
  width: 180rpx;
  height: 180rpx;
  border: solid 1rpx #d7be71;
  padding: 1rpx;
}
.small-image-first-line {
  width: 147rpx;
  height: 116rpx;
  border: solid 1rpx #d7be71;
}
.image-background {
  width: 250rpx;
  height: 320rpx;
  margin-top: 10rpx;
  border-right: solid 1rpx #242018;
}
.top-popup-content-wrapper {
  display: flex;
  background: #4f4f4f;
  border: solid 6rpx #d7be71;
}
.top-popup-image-content {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  flex-wrap: nowrap;
  width: 2800rpx;
  height: 370rpx;
  background: #041516;
  overflow: hidden;
}
.top-popup-image-button-content {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  width: 190rpx;
  height: 370rpx;
  background: #041516;
}
.top-popup-mask-bottom {
  position: fixed;
  top: 350rpx;
  width: 750rpx;
  height: 10rpx;
  background-color: #041516;
}
.panel-btn-popup.top {
  width: 90rpx;
  height: 56rpx;
  position: fixed;
  top: 405rpx;
  right: 43%;
}
.top-popup-mask-bottom {
  position: fixed;
  width: 750rpx;
  height: 10rpx;
  top: 450rpx;
  background-color: #d7be71;
}
.btn-image {
  width: 100rpx;
  height: 100rpx;
  margin: 0 auto;
}
.top-scrollview {
  background: #041516;
  width: 560rpx;
}
.background-image {
  height: 95%;
  width: 100%;
  margin-top: 3%;
}
</style>

<template lang="wxml" minapp="wepy">
  <view class="screen">
    <view class="mask mask-top"></view>
    <view class="mask mask-top bottom"></view>
    <image class="panel-btn top" src="images/triangle_down_dark.png" @tap="showTopPopUp()" />
    <wxc-popup class="J_Popup" animation-mode="top" align="top" locked="true" status="{{topPopStatus}}">
      <view class="popup__content top-popup-content-wrapper">
        <view class="top-popup-mask-bottom "></view>
        <image class="panel-btn-popup.top" src="images/triangle_dark.png" @tap="hideTopPopUp()" />
        <scroll-view class="top-scrollview" scroll-x="true">
          <view class="top-popup-image-content">
            <image class="image-background" lazy-load="{{true}}" wx:for="{{backgroundImg}}" src="{{item.imgUrl}}" @tap="addBackground({{item}})" />
          </view>
        </scroll-view>
        <view class="top-popup-image-button-content">
          <image class="btn-image" src="images/question.png" @tap="toVideoPage()" />
          <image class="btn-image" src="images/check.png" @tap="confirmComplete()" />
        </view>
      </view>
    </wxc-popup>
    <view class="container" bindtap="bindtap">
      <image class="background-image" src="{{currentBackground}}">
        <view class="touchWrap" style="transform: scale({{item.scale}});top:{{item.top}}px;left:{{item.left}}px; " wx:for="{{itemList}}" wx:key="{{item.id}}">
          <view class="imgWrap {{item.active?'touchActive':''}}" style="transform: rotate({{item.angle}}deg);">
            <image bindload="loadImg" bindtouchend="WraptouchEnd" bindtouchmove="WraptouchMove" bindtouchstart="WraptouchStart" data-id="{{item.id}}" src="{{item.image}}" style="width:{{item.width}}px;height:{{item.height}}px;" />
            <image bindtap="deleteItem" class="x" data-id="{{item.id}}" src="./images/x.png" style="transform: scale({{item.oScale}});transform-origin:center;" />
            <image bindtouchend="touchEnd" bindtouchmove="touchMove" bindtouchstart="touchStart" class="o" data-id="{{item.id}}" src="./images/o.png" style="transform: scale({{item.oScale}});transform-origin:center;" />
          </view>
        </view>
    </view>
    <view class="confirm-btn-container">
      <view class="mask bottom top"></view>
      <view class="mask bottom"></view>
      <image class="panel-btn down" src="images/triangle_dark.png" @tap="showBottomPopUp()" />
    </view>
    <wxc-popup class="J_Popup" animation-mode="bottom" align="bottom" locked="true" status="{{bottomPopStatus}}">
      <view class="popup__content">
        <view class="bottom-popup-mask-top "></view>
        <image class="panel-btn-popup.down" src="images/triangle_down_dark.png" @tap="hideBottomPopUp()" />
        <view class="bottom-popup-image-first-line-content">
          <image class="small-image-first-line" lazy-load="{{true}}" wx:for="{{basicImageList}}" src="{{item.tempFilePath}}" @tap="addImage({{item}})" />
        </view>
        <view class="bottom-popup-image-content">
          <image class="small-image" lazy-load="{{true}}" wx:for="{{smallImageList}}" src="{{item.tempFilePath}}" @tap="addImage({{item}})" />
        </view>
      </view>
    </wxc-popup>
  </view>
</template>

<script>
import wepy from 'wepy';
export default class DrawPanel extends wepy.page {
  config = {
    navigationBarTitleText: '画板 ',
    disableScroll: true,
    navigationBarBackgroundColor: '#041516',
    usingComponents: {
      'wxc-mask': '../../packages/@minui/wxc-mask/dist/index',
      'wxc-popup': '../../packages/@minui/wxc-popup/dist/index'
    }
  };
  data = {
    itemList: [],
    items: [],
    index: null,
    sysData: null,
    canvasTemImg: null,
    canvasWidth: 90,
    canvasHeight: null,
    maskStatus: 'hide',
    showCanvas: false,
    bottomPopStatus: 'hide',
    topPopStatus: 'hide',
    backgroundImg: [],
    currentBackground: null,
    basicImageList: [],
    smallImageList: [],
    idCounter: 0
  };
  methods = {
    toVideoPage() {
      wepy.switchTab({
        url: 'video'
      });
    },
    showBottomPopUp() {
      console.log('showBottomPopUp: ');
      this.bottomPopStatus = 'show';
    },
    hideBottomPopUp() {
      console.log('hideBottomPopUp: ');
      this.bottomPopStatus = 'hide';
    },
    addImage(item) {
      console.log('item: ', item);
      this.initImage(item);
      this.$apply();
      this.bottomPopStatus = 'hide';
    },
    showTopPopUp() {
      this.topPopStatus = 'show';
    },
    hideTopPopUp() {
      this.topPopStatus = 'hide';
    },
    addBackground(item) {
      console.log('currentBackground: ', item);
      wepy.showLoading({
        title: '请等待', //提示的内容,
        mask: true, //显示透明蒙层，防止触摸穿透,
        success: res => {}
      });
      var that = this;
      wx.downloadFile({
        url: item.imgUrl, //仅为示例，并非真实的资源
        success: function(res) {
          // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
          if (res.statusCode === 200) {
            wepy.hideLoading();
            console.log('download success.' + res);
            that.$parent.globalData.currentBackground = res.tempFilePath;
            that.currentBackground = that.$parent.globalData.currentBackground;
            that.topPopStatus = 'hide';
            that.$apply();
          }
        },
        fail: function(error) {
          wepy.hideLoading();
          wepy.showToast({
            title: '发生错误，下载图片失败', //提示的内容,
            icon: 'none', //图标,
            duration: 2000, //延迟时间,
            mask: false, //显示透明蒙层，防止触摸穿透,
            success: res => {}
          });
        }
      });
    },
    confirmComplete() {
      this.toCompletePage();
    }
  };
  loadImg(t) {}
  bindtap(e) {}
  // 触摸开始事件  items是this.data.itemList的全局变量，便于赋值  所有的值都应给到对应的对象里
  touchStart(e) {
    //找到点击的那个图片对象，并记录
    for (let i = 0; i < this.items.length; i++) {
      this.items[i].active = false;
      if (e.currentTarget.dataset.id == this.items[i].id) {
        console.log('e.currentTarget.dataset.id', e.currentTarget.dataset.id);
        this.index = i;
        // console.log(this.items[this.index]);
        this.items[this.index].active = true;
      }
    }
    //获取作为移动前角度的坐标
    this.items[this.index].tx = e.touches[0].clientX;
    this.items[this.index].ty = e.touches[0].clientY;
    //移动前的角度
    this.items[this.index].anglePre = this.countDeg(
      this.items[this.index].x,
      this.items[this.index].y,
      this.items[this.index].tx,
      this.items[this.index].ty
    );
    //获取图片半径
    this.items[this.index].r = this.getDistancs(
      this.items[this.index].x,
      this.items[this.index].y,
      this.items[this.index].left,
      this.items[this.index].top
    );
  }
  // 触摸移动事件
  touchMove(e) {
    //记录移动后的位置
    this.items[this.index]._tx = e.touches[0].clientX;
    this.items[this.index]._ty = e.touches[0].clientY;
    //移动的点到圆心的距离
    this.items[this.index].disPtoO = this.getDistancs(
      this.items[this.index].x,
      this.items[this.index].y,
      // this.items[this.index]._tx - this.sysData.windowWidth * 0.125,
      this.items[this.index]._tx,
      this.items[this.index]._ty - 10
    );
    this.items[this.index].scale =
      this.items[this.index].disPtoO / this.items[this.index].r; //手指滑动的点到圆心的距离与半径的比值作为图片的放大比例
    this.items[this.index].oScale = 1 / this.items[this.index].scale; //图片放大响应的右下角按钮同比缩小
    //移动后位置的角度
    this.items[this.index].angleNext = this.countDeg(
      this.items[this.index].x,
      this.items[this.index].y,
      this.items[this.index]._tx,
      this.items[this.index]._ty
    );
    //角度差
    this.items[this.index].new_rotate =
      this.items[this.index].angleNext - this.items[this.index].anglePre;
    //叠加的角度差
    this.items[this.index].rotate += this.items[this.index].new_rotate;
    this.items[this.index].angle = this.items[this.index].rotate; //赋值
    //用过移动后的坐标赋值为移动前坐标
    this.items[this.index].tx = e.touches[0].clientX;
    this.items[this.index].ty = e.touches[0].clientY;
    this.items[this.index].anglePre = this.countDeg(
      this.items[this.index].x,
      this.items[this.index].y,
      this.items[this.index].tx,
      this.items[this.index].ty
    );
    this.itemList = this.items;
  }
  touchEnd(t) {}
  WraptouchStart(e) {
    for (let i = 0; i < this.items.length; i++) {
      //旋转数据找到点击的
      this.items[i].active = false;
      if (e.currentTarget.dataset.id == this.items[i].id) {
        this.index = i; //记录下标
        this.items[this.index].active = true; //开启点击属性
      }
    }
    this.items[this.index].lx = e.touches[0].clientX; // 记录点击时的坐标值
    this.items[this.index].ly = e.touches[0].clientY;
    this.itemList = this.items;
  }
  WraptouchMove(e) {
    //移动时的坐标值也写图片的属性里
    this.items[this.index]._lx = e.touches[0].clientX;
    this.items[this.index]._ly = e.touches[0].clientY;
    //追加改动值
    this.items[this.index].left +=
      this.items[this.index]._lx - this.items[this.index].lx; // x方向
    this.items[this.index].top +=
      this.items[this.index]._ly - this.items[this.index].ly; // y方向
    this.items[this.index].x +=
      this.items[this.index]._lx - this.items[this.index].lx;
    this.items[this.index].y +=
      this.items[this.index]._ly - this.items[this.index].ly;
    //把新的值赋给老的值
    this.items[this.index].lx = e.touches[0].clientX;
    this.items[this.index].ly = e.touches[0].clientY;
    this.itemList = this.items;
  }
  WraptouchEnd() {}
  deleteItem(e) {
    let temp = [];
    for (let a = 0; a < this.items.length; a++) {
      if (e.currentTarget.dataset.id != this.items[a].id) {
        temp.push(this.items[a]);
      }
    }
    if (temp.length > 0) {
      temp[temp.length - 1].active = true;
      this.items = temp;
      this.itemList = this.items;
    } else {
      this.items = temp;
      this.itemList = this.items;
    }
  }
  onLoad(option) {
    this.init();
  }
  onShow() {
    wepy.showToast({
      title: '上方拉栏可选择辅助背景或确认,下方拉栏中，可向画板中添加符号', //提示的内容,
      icon: 'none', //图标,
      duration: 6000, //延迟时间,
      success: res => {}
    });
  }
  setNavBar() {
    wx.setNavigationBarTitle({
      title: 'TEST'
    });
    wx.setNavigationBarColor({
      frontColor: '#000000',
      backgroundColor: this.$parent.config.window.navigationBarBackgroundColor,
      animation: {
        duration: 400,
        timingFunc: 'easeIn'
      }
    });
    wx.showTabBar({
      aniamtion: true
    });
  }
  init() {
    this.$parent.globalData.drawItems = [];
    this.sysData = wx.getSystemInfoSync();
    console.log('this.sysData: ', this.sysData);
    this.getBackgroundImgs();
    this.getBasicImgs();
    this.getAnswersImgs();
  }
  getBackgroundImgs() {
    for (let i = 1; i <= 15; i++) {
      this.backgroundImg.push({
        imgUrl:
          this.$parent.globalData.ossImageUrl + 'background/beij-0' + i + '.png'
      });
    }
  }
  getBasicImgs() {
    // for (let i = 1; i <= 5; i++) {
    //   this.basicImageList.push({
    //     id: 'b' + i,
    //     tempFilePath:
    //       this.$parent.globalData.ossImageUrl +
    //       'answerImageSmall/b' +
    //       i +
    //       '.png', //图片地址
    //     width: 90
    //   });
    // }
  }
  getAnswersImgs() {
    for (let i = 0; i < this.$parent.globalData.userAnswer.length; i++) {
      //8 answers
      this.smallImageList.push({
        id: this.$parent.globalData.userAnswer[i].index,
        tempFilePath: this.$parent.globalData.userAnswer[i].imageSrc, //图片地址
        width: 90
      });
      //第一行拆分图
      if (i != 3 && i != 1 && i != 0 && this.basicImageList.length <= 4) {
        this.basicImageList.push({
          id: 'b' + i,
          tempFilePath:
            this.$parent.globalData.ossImageUrl +
            'answerImageSmall/' +
            this.$parent.globalData.userAnswer[i].index +
            '-1.png', //图片地址

          width: 90
        });

        if (
          this.$parent.globalData.userAnswer[i].index == '5-4' ||
          this.$parent.globalData.userAnswer[i].index == '8-31' ||
          this.$parent.globalData.userAnswer[i].index == '5-14'
        ) {
          this.basicImageList.push({
            id: 'b' + i,
            tempFilePath:
              this.$parent.globalData.ossImageUrl +
              'answerImageSmall/' +
              this.$parent.globalData.userAnswer[i].index +
              '-2.png', //图片地址
            width: 90
          });
        }
      }
    }

    console.log(' this.basicImageList: ', this.basicImageList);
    //第四个问题的拆分图
    for (let i = 1; i <= 4; i++) {
      console.log(
        this.$parent.globalData.ossImageUrl +
          'answerImageSmall/' +
          this.$parent.globalData.userAnswer[3].index +
          '-' +
          i +
          '.png'
      );
      this.smallImageList.push({
        id: 's' + i,
        tempFilePath:
          this.$parent.globalData.ossImageUrl +
          'answerImageSmall/' +
          this.$parent.globalData.userAnswer[3].index +
          '-' +
          i +
          '.png', //图片地址
        width: 90
      });
    }
    console.log('this.smallImageList:', this.smallImageList);
  }
  countDeg(cx, cy, pointer_x, pointer_y) {
    var ox = pointer_x - cx;
    var oy = pointer_y - cy;
    var to = Math.abs(ox / oy);
    var angle = Math.atan(to) / (2 * Math.PI) * 360; //鼠标相对于旋转中心的角度
    // console.log("ox.oy:", ox, oy);
    if (ox < 0 && oy < 0) {
      //相对在左上角，第四象限，js中坐标系是从左上角开始的，这里的象限是正常坐标系
      angle = -angle;
    } else if (ox <= 0 && oy >= 0) {
      //左下角,3象限
      angle = -(180 - angle);
    } else if (ox > 0 && oy < 0) {
      //右上角，1象限
      angle = angle;
    } else if (ox > 0 && oy > 0) {
      //右下角，2象限
      angle = 180 - angle;
    }
    return angle;
  }
  getDistancs(cx, cy, pointer_x, pointer_y) {
    var ox = pointer_x - cx;
    var oy = pointer_y - cy;
    // console.log("ox.oy:", ox, oy);
    return Math.sqrt(ox * ox + oy * oy);
  }
  initImage(item) {
    let image = {};
    if (item.tempFilePath.startsWith('https')) {
      wepy.showLoading({
        title: '请等待', //提示的内容,
        mask: true, //显示透明蒙层，防止触摸穿透,
        success: res => {}
      });
      var that = this;
      wx.downloadFile({
        url: item.tempFilePath, //仅为示例，并非真实的资源
        success: function(res) {
          // 只要服务器有响应数据，就会把响应内容写入文件并进入 success 回调，业务需要自行判断是否下载到了想要的内容
          if (res.statusCode === 200) {
            wepy.hideLoading();
            console.log('download success.' + res);
            image.image = res.tempFilePath;
            that.topPopStatus = 'hide';
            that.$apply();
          }
        }
      });
    } else {
      image.image = item.tempFilePath;
    }
    image.id = item.id + this.idCounter;
    this.idCounter++;
    /**image.itemid = t.itemid,**/
    image.top = 100;
    image.left = 100;
    image.width = item.width;
    image.scale = 1;
    image.angle = 0;
    image.rotate = 0;
    image.active = false;
    // image.hdw = t.detail.height / t.detail.width;
    image.hdw = 1;
    image.height = image.width * image.hdw;
    image.x = image.left + image.width / 2;
    image.y = image.top + image.height / 2;
    this.items.push(image);
    // }
    this.itemList = this.items;
  }
  toCompletePage() {
    this.topPopStatus = 'hide';
    this.$parent.globalData.drawItems = [];
    this.$parent.globalData.drawItems = this.itemList;
    console.log(
      'this.$parent.globalData.drawItems: ',
      this.$parent.globalData.drawItems
    );
    wepy.navigateTo({
      url: 'draw-result'
    });
  }
}
</script>
